x_axis = c(1:1000)
plot(x_axis,u_values)
plot(1/t_values)
plot(1/sig_values)
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
sig_values<-c()
for (i in 1:1000) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((x_values-u)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
u_values[i]=u
sig_values[i]=1/t
}
x_axis = c(1:1000)
plot(x_axis,u_values)
plot(1/sig_values)
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:1000) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((x_values-u)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:1000)
plot(x_axis,u_values)
plot(1/t_values)
plot(sigmasquared_values)
plot(sigmasquared_values,ylim=c(4,20))
plot(sigmasquared_values,ylim=c(6,18))
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:500) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((x_values-u)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:500)
plot(x_axis,u_values)
plot(1/t_values)
plot(sigmasquared_values,ylim=c(6,18))
plot(x_axis,u_values)
plot(x_axis,u_values,ylim=c(0,18))
plot(x_axis,u_values,ylim=c(5,15))
plot(x_axis,u_values,ylim=c(8,12))
plot(x_axis,u_values,ylim=c(9,11))
plot(x_axis,u_values,ylim=c(9.5,10.5))
plot(x_axis,u_values,ylim=c(9.5,10))
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:500) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((u-x_values)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:500)
plot(x_axis,u_values,ylim=c(9.5,10))
plot(1/t_values)
plot(sigmasquared_values,ylim=c(6,18))
t_values
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:500) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((u-x_values)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:500)
plot(x_axis,u_values,ylim=c(9.5,10))
plot(1/t_values)
plot(sigmasquared_values,ylim=c(6,18))
plot(x_axis,u_values,ylim=c(9.5,10))
plot(1/t_values)
plot(sigmasquared_values,ylim=c(6,18))
mean(u_values)
mean(sigmasquared_values)
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,this_shape,this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:500) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((x_values-u)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,shape=this_shape,scale=this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:500)
plot(x_axis,u_values,ylim=c(9.5,10))
plot(1/t_values)
plot(sigmasquared_values,ylim=c(6,18))
#finalestimates
mean(u_values)
mean(sigmasquared_values)
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,shape=this_shape,scale=this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:500) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((x_values-u)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,shape=this_shape,scale=this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:500)
plot(x_axis,u_values,ylim=c(9.5,10))
plot(1/t_values)
plot(sigmasquared_values,ylim=c(6,18))
#finalestimates
mean(u_values)
mean(sigmasquared_values)
plot(sigmasquared_values,ylim=c(6,18))
plot(sigmasquared_values,ylim=c(0,1))
plot(sigmasquared_values,ylim=c(0,0.2))
plot(sigmasquared_values,ylim=c(0,0.1))
plot(sigmasquared_values,ylim=c(0,0.001))
plot(x_axis,u_values)
,ylim=c(9.5,10)
plot(x_axis,u_values,ylim=c(9.5,10))
plot(x_axis,u_values,ylim=c(9.7,10))
plot(x_axis,u_values,ylim=c(9.8,10))
plot(x_axis,u_values,ylim=c(9.87,10))
plot(x_axis,u_values,ylim=c(9.87,9.92))
u_values
plot(x_axis,u_values,ylim=c(9.9,9.91))
plot(x_axis,u_values,ylim=c(9.902,9.904))
plot(x_axis,u_values,ylim=c(9.903,9.9034))
plot(x_axis,u_values,ylim=c(9.9034,9.9034))
plot(x_axis,u_values,ylim=c(9.903,9.9034))
plot(x_axis,u_values,ylim=c(9.9032,9.9034))
plot(x_axis,u_values,ylim=c(9.9033,9.9034))
plot(x_axis,u_values,ylim=c(9.9033,9.90334))
plot(x_axis,u_values,ylim=c(9.90332,9.90334))
plot(x_axis,u_values,ylim=c(9.903325,9.90334))
plot(x_axis,u_values,ylim=c(9.903325,9.903335))
plot(sigmasquared_values,ylim=c(0,0.001))
plot(sigmasquared_values,ylim=c(0,0.00001))
plot(sigmasquared_values,ylim=c(0,0.0001))
plot(sigmasquared_values,ylim=c(0,0.001))
plot(sigmasquared_values,ylim=c(0,0.0009))
plot(sigmasquared_values,ylim=c(0,0.0005))
plot(sigmasquared_values,ylim=c(0,0.0003))
plot(sigmasquared_values,ylim=c(00.000001,0.0003))
plot(sigmasquared_values,ylim=c(00.00001,0.0003))
plot(sigmasquared_values,ylim=c(00.0001,0.0003))
plot(sigmasquared_values,ylim=c(00.0004,0.0003))
plot(sigmasquared_values,ylim=c(00.0002,0.0003))
#finalestimates
mean(u_values)
mean(sigmasquared_values)
t_estimates
sigmasquared_values
t_estimates
plot(t_estimates)
max(sigmasquared_values)
u
t
mean(u_values)
mean(sigmasquared_values)
set.seed(123)
x_values <- c(12.8, 10.5, 13.2, 13.0, 7.0, 11.0, 13.4, 13.2, 9.5, 11.0, 10.9, 4.6, 5.8, 3.2, 9.8, 0.2, 11.2,
7.2, 14.7, 5.9, 9.7, 17.6, 8.5, 6.8, 7.2, 12.2, 16.7, 10.4, 14.2, 5.7)
xbar<- mean(x_values)
n<-length(x_values)
u0<- 8
a0sqr<- 4
alpha0<- 5
beta0<- 1
t0=1/a0sqr
t<-t0#assume equal t0 at first
#posterior estimate for u
thismean<- (n*xbar*t+u0*t0)/(n*t+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#posterior estimate for t
S <- sum((x_values-u_estimate)^2)
this_shape<-alpha0+n/2
this_scale<-beta0+S/2
t_estimates<-rgamma(1000,shape=this_shape,scale=this_scale)
t<-mean(t_estimates)
#repeat1000times
u_values<-c()
t_values<-c()
for (i in 1:500) {
#estimate u
thismean<- ((n*xbar*t)+(u0*t0))/((n*t)+t0)
thisvariance <- 1/(n*t+t0)
u_estimates<-rnorm(1000,thismean,thisvariance)
u<-mean(u_estimates)
#estimate t
S <- sum((x_values-u)^2)
this_shape<-alpha0+(n/2)
this_scale<-beta0+(S/2)
t_estimates<-rgamma(1000,shape=this_shape,scale=this_scale)
t<-mean(t_estimates)
u_values[i]=u
t_values[i]=t
}
sigmasquared_values = 1/t_values
x_axis = c(1:500)
plot(x_axis,u_values,ylim=c(9.903325,9.903335))
plot(sigmasquared_values,ylim=c(00.0002,0.0003))
#finalestimates
mean(u_values)
mean(sigmasquared_values)
devtools::install_github("connolr3/eegdatasim")
devtools::install_github("connolr3/eegdatasim",force = TRUE)
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
library(eegdatasim)
noise(200,1,250)
makinen1a()
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
devtools::install_github("connolr3/eegdatasim")
library(eegdatasim)
noise(200,1,250)
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
library(eegdatasim)
noise(200,1,250)
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
library(eegdatasim)
noise(200,1,250)
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
library(eegdatasim)
noise(200,1,250)
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
devtools::install_github("connolr3/eegdatasim")
devtools::install_github("connolr3/eegdatasim")
devtools::install_github("connolr3/eegdatasim")
library(eegdatasim)
noise(200,1,250)
meanpower <- as.vector(R.matlab::readMat("meanpower.mat")$meanpower)
setwd("C:/Users/rosie/OneDrive - TCDUD.onmicrosoft.com/TCD/4th Year/FYP/eegdatasim/R")
meanpower <- as.vector(R.matlab::readMat("meanpower.mat")$meanpower)
meanpower
#' @export
noise <- function(frames, epochs, srate, meanpower = NULL) {
if (frames < 0) stop("frames cannot be less than 0")
if (srate < 0) stop("srate cannot be less than 0")
if (epochs < 0) stop("epochs cannot be less than 0")
if( is.null(meanpower)){
#  path<-file.path("R","meanpower.mat")
#  meanpower <- as.vector(R.matlab::readMat(path)$meanpower)
meanpower<-c(0.001512436 ,0.0008492235 ,0.0006087524 ,0.0004898673 ,0.0004235233
,0.0003916184 ,0.0003627388 ,0.0003405692 ,0.0003431604 ,0.0003972602
,0.0004257465 ,0.0003469311 ,0.0002942894 ,0.0002556115 ,0.0002355836
,0.0002227425 ,0.0002139522 ,0.0002077288 ,0.0002048202 ,0.0002017179
,0.0002007883 ,0.0001979438 ,0.0001955506 ,0.0001913121 ,0.0001866472
,0.0001830944 ,0.0001782477 ,0.0001759883 ,0.0001716569 ,0.0001692953
,0.0001641865 ,0.0001611862 ,0.0001595688 ,0.0001574246 ,0.0001553133
,0.0001546942 ,0.0001521656 ,0.0001495667 ,0.0001471883 ,0.0001465332
,0.0001451215 ,0.0001449061 ,0.0001434163 ,0.0001444918 ,0.0001419088
,0.0001434826 ,0.0001430495 ,0.0001411656 ,0.0001425278 ,0.0001405317
,0.0001406423 ,0.0001381596 ,0.0001383266 ,0.00013682 ,0.0001370514
,0.0001373267 ,0.0001371059 ,0.000135919 ,0.0001367891 ,0.0001448403
,0.0001355708 ,0.0001367028 ,0.0001360831 ,0.0001333923 ,0.0001329323
,0.0001326268 ,0.0001309518 ,0.0001319445 ,0.0001302691 ,0.0001297129
,0.0001288177 ,0.0001280689 ,0.000129027 ,0.0001311451 ,0.0001288131
,0.0001293273 ,0.0001274819 ,0.000126366 ,0.0001278305 ,0.0001259032
,0.0001262501 ,0.0001252715 ,0.0001256308 ,0.0001269599 ,0.0001253855
,0.0001258603 ,0.0001232594 ,0.0001247888 ,0.0001235551 ,0.0001233012
,0.0001229693 ,0.0001232385 ,0.0001215312 ,0.0001221649 ,0.0001226418
,0.000121279 ,0.0001224354 ,0.0001222475 ,0.0001204993 ,0.0001210175
,0.0001219137 ,0.0001208042 ,0.0001191548 ,0.0001192165 ,0.0001196114
,0.0001190726 ,0.0001185056 ,0.0001184628 ,0.0001203116 ,0.0001189227
,0.0001179185 ,0.0001202338 ,0.0001197265 ,0.0001200837 ,0.0001174336
,0.0001177806 ,0.0001195453 ,0.0001210516 ,0.0001182723 ,0.0001175911
,0.0001172347 ,0.0001172174 ,0.0001188854 ,0.0001175014 ,0.0001183316
)
}
signals<-matrix(0,frames,epochs)
signals<-apply(signals,2,fill_signals,meanpower=meanpower,frames=frames,epochs=epochs,srate=srate)
return(as.vector(signals))
}
remove.packages("eegdatasim", lib="~/R/win-library/4.1")
devtools::install_github("connolr3/eegdatasim")
